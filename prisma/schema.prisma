generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  name              String
  phone             String     @unique
  cpf               String     @unique
  password          String
  role              RoleEnum[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  email_verified_at DateTime?
  company          Company?

  @@map("users")
  Order Order[]
}

model Company {
  id        Int      @id @default(autoincrement())
  companyName      String
  cnpj      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Service Service[]

  @@map("companies")
}

model Service {
  id          Int       @id @default(autoincrement())
  title        String
  description String?
  price       Float
  status      Boolean
  companyId  Int
  categoryId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  
  @@map("services")
  Order Order[]
}
model ServiceCategory {
  id          Int       @id @default(autoincrement())
  title        String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service     Service[]

  @@map("service_categories")
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  serviceId   Int
  status      OrderStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     Service   @relation(fields: [serviceId], references: [id])

  @@map("orders")
}

enum RoleEnum {
  ADMIN
  AFFILIATE
  USER
  COMPANY
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  FINISHED
}